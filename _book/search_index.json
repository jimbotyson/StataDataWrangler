[["index.html", "Data Manipulation and Analysis in Stata 1 Introduction", " Data Manipulation and Analysis in Stata 1 Introduction Data manipulation is the process of cleaning, organising and preparing data in a way that makes it suitable for analysis. Most real-world data sets require some form of manipulation to facilitate the downstream analysis and this process is often repeated a number of times during the data analysis cycle. In this series you will learn how to manipulate raw data and prepare it for analysis and then to carry out simple analysis of your data. There are ** sections to the tutorial, but each is quite short. There are few lengthy explanations. If you are not using this material in combination with a class, you will sometimes need to google for an explanation. Last Updated: Jan 06, 2023 7:00 PM "],["acknowledgments.html", "2 Acknowledgments", " 2 Acknowledgments The format of this workshop is partly based on the following: Data Manipulation in R which is Altaf Alis most excellent web based tutorial on using tidy data in R. This work is licensed under a Creative Commons Attribution-ShareAlike 4.0 International License. "],["getting-started.html", "3 Getting Started 3.1 Prerequisites 3.2 Software Requirements 3.3 How to use these materials 3.4 Data 3.5 To be added", " 3 Getting Started 3.1 Prerequisites These tutorials assume no knowledge of Stata but do assume that you are comfortable using a computer with a modern user interface (for example Windows, MacOs, linux with Ubuntu) and that you will be happy typing commands in a console or a script. You will also need to learn how to navigate a folder or directory tree. 3.2 Software Requirements Recent versions of Stata, 17 or later are required. You can check your version from the command line1 with version. 3.3 How to use these materials 3.3.1 The Larger Exercises The most important learning experiences in this offering are the two parts of the larger exercises, each of which covers a reasonably coherent subset of the material. You should complete the Part I exercise after you have learned about basic graphing and Part II when you have learned about regression modelling. They are designed to be completed by learners in pairs. After the learners work on one of the exercises, the solution script should be presented, and a round table discussion of problems encountered and alternative solutions should take place. 3.3.2 Routes One section of this book contains more material than a beginning learner should necessarily face: the section on Some simple graph scripts. The two larger exercises can be completed successfully without covering all the material in this section and the material in this section can usefully be covered separately at some later time. I would recommend the learner should cover up to Exercise 14.12. The section on Tables has been deliberately abbreviated from a much more complete session on Tables and Collections. The complexity of collections and over automatic reporting make it undesirable that a learner should face more material at this stage. 3.3.3 General advice Test all the code you see. Some of the code is written to be added to a script and you should develop a single script for all sections since some of the later material will assume that you have run earlier example code. Sometimes the tutorial suggests that you run a command on the console or command line and you should do so. Dont add commands intended for the console to your script - they may cause your script to break and fail. Code to be executed and run by you looks like this: type this at the console and hit return or add it to a script and run the script Generally the tutorial will be explicit about when you should add code to a script. As the series progresses, I will provide less explicit detail in my instructions. You will move from type these characters and hit return to The Stata command for a oneway anova is oneway. Use this command to test the mean of boodpressure by ethnicity 3.4 Data The data files to be used in most exercises and examples are at https://www.ucl.ac.uk/~ccaajim/results and https://www.ucl.ac.uk/~ccaajim/medicalXtrial.xls You can read these data using the import command. You will find this cheeatsheet useful. ` ## Reference material The best source of learning material is at https://stats.oarc.ucla.edu/stata/ and you should download the cheat sheets from https://www.stata.com/bookstore/stata-cheat-sheets/ 3.5 To be added use of frames; reshaping data sets. See Stata features page. "],["some-stata-basics.html", "4 Some Stata basics 4.1 Folders 4.2 Exercise 4.3 Exercise 4.4 Common File types", " 4 Some Stata basics 4.1 Folders I assume that you have a folder structure something like Project Folder  raw_data  scripts   cleanmydata.do   modelmydata.do  documentation   PDFs   Word_docs graphs (though you probably dont have scripts named cleanmydata.do and modelmydata.do, those are just examples). Of course, other folder set-ups are possible, so be aware of your own as you follow the rest of this guide. The path to my main project folder,for example, is c:\\users\\jt\\Documents\\Projects\\StataWrangling 4.2 Exercise If you do not have a folder for your project (including for this training series project!), create one now with subfolders as above. You do not need to create the two do files in the scripts folder. You can do this in Stata. First type pwd and then hit enter. Check the result and make sure that it shows the directory where you want to store your projects. To create the structure, you will find it easier right now using your computers graphical user interface, but in case you want to do it in Stata, type the following Stata commands on the console (the command window), following each by return (replace ProjectName with a suitable name for your project) mkdir ProjectName cd ProjectName mkdir raw_data mkdir scripts mkdir documentation mkdir graphs cd documentation mkdir PDFs mkdir Word_docs cd .. pwd Check that you end up back in your new project folder. 4.3 Exercise Using your operating systems file explorer, check the folder structure you just created for your project. If it isnt what you expect, correct it. 4.4 Common File types You will commonly encounter three types of file specific to Stata The .dta file which is Statas proprietary data format; The .do file which is Statas scripting file type; The .log file which is the file type recording session logs. "],["the-do-file.html", "5 The do file 5.1 Initialising your script 5.2 Exercise 5.3 Which directory? 5.4 Change to your data directory 5.5 Exercise", " 5 The do file Do files are Statas scripts. Simple programs made of text files of Stata commands. Lets start off by creating a new do file, type doedit newdo.do on the Stata console. You can also create a new do file editing session from the Window menu in Stata. Clear everything to make sure theres nothing leftover in our environment clear all 5.1 Initialising your script In a new data wrangling script you should start a log; make sure you are in the correct project directory; clear working memory. So to start this process, in your new do file add these lines: capture log close log using &quot;MainProjectName $S_DATE.log&quot;, append and capture cmdlog close cmdlog using &quot;CommandsProjectName $S_DATE.log&quot;, append The first will log all commands and results window ouput (ie not graphs) the second will log commands only and not output. As you gain more experience you will probably choose to use on ly one of these logs. The commands use a Stata system variable $S_DATE to insert todays date into the file name of your logs. This makes tracking your work easier. 5.2 Exercise Using your internet searching powers, find out why we wrote capture log close at the start of the script, rather than just log close. 5.2.1 Solution You will find an explanation here. 5.3 Which directory? Next you should make sure you are in the correct directory. To check which directory you are currently in type pwd on the Stata console. 5.4 Change to your data directory Change directory to the folder that will hold your projects raw data files (that is data that you have not processed or transformed). Normally, for a data wrangling script, this will be the raw_data directory for the project and you change to that directory by typing a line like cd c:\\users\\jt\\Documents\\Projects\\StataWrangling\\raw_data\\ (you must alter this to point at your folder). When you write code to read a raw data file, you will want to make sure that it is read into this directory. 5.5 Exercise Close the log file or log files you have created and outside of Stata find the files and view the content. "],["dataset.html", "6 Dataset 6.1 Data Types 6.2 Interpretation of describe output 6.3 Interpretation of codebook 6.4 Exercise", " 6 Dataset Were using a dataset of examination results from thirty school students for demonstration and practice. For some more complicated exercises (at about the halfway mark and at the end), we will use a data set of medical trial results. These data are in either Stata or Excel format. Each case or observation is a row with variables in columns2. The exam data look something like this: surname sex class maths english history ADAMS 2 1 55 63 65 ALI 2 1 52 46 35 BAGAL 1 3 51 58 55 BENJAMIN 1 2 59 70 68 BLAKEMORE 2 2 56 38 40 The Stata use command reads in data from Stata format files. Read the main data file by adding this command to your do file: use https://www.ucl.ac.uk/~ccaajim/results When you first read a datafile, you should always describe the data; check the codebook. You can do this for the complete set of variables for simple cases, but you may wish to be selective when you have a lot of variables. 6.1 Data Types The examination data is quite simple. In your do file add describe codebook And run the do file. This first command produces The main Stata results screen showing the output of desc 6.2 Interpretation of describe output This output shows first how many observations there are in your data and how many variables. The table that follows includes some detail about each variable: 6.2.1 Storage type There are two basic data types in Stata: numeric and string data. String data has two subtypes: strL (L for long) variables can store phenominal amounts of character data (2 billion) and str# (where # is a number) and have a limit on length of 2045 characters. Numeric data is of one of five types: type precision range byte integer -127 to 100 int integer -32,767 and 32,740 long integer -2,147,483,647 and 2,147,483,620 float real 8 digits of accuracy double real 16 digits of accuracy 6.2.2 Format types These are associated with variables - each has a default, which determines how values are displayed, so that regardless of the precision of the type, the number of decimal places and the width in number of characters to be displayed can be fixed. So a format type %9.0g is a left justified number of maximum 9 characters in width and with specific decimal precision (although in this case zero means just as many as can be displayed for this width). 6.3 Interpretation of codebook The output of codebook shows you the data type of the variables; the range and the numeric unit of measure; the number of unique values in the data; the number of values missing; the mean value for continuous variables; the standard deviation; the percentile values for the 10%, 25%, 50%, 75%, 90% points. The value of output from codebook is enhanced if you have taken care to (#Labelling) [label] variables and values. 6.4 Exercise What are the types and formats of the variables maths, english, history? Why is maths different? Or almost, this data is in wide rather then long format, so it is not strictly tidy. "],["listing-and-sorting.html", "7 Listing and Sorting 7.1 Listing cases 7.2 Exercise 7.3 Sorting 7.4 gsort", " 7 Listing and Sorting 7.1 Listing cases To list data in the main results window you use the list command. If you type list maths english on the console, Stata will respond by listing all observations for those variables. If you dont specify variables Stata use all the variables. 7.2 Exercise Type following line on the console list maths class in 1/6 How would you describe the effect of the modifier in 1/6 7.3 Sorting The most basic sort command in Stata is sort. This command sorts on a list of variables (at least one) in ascending order. Run this code in the command window sort sex maths If you list the data now and scroll through the output, you will see it is sorted first by sex ascending and then by maths ascending. While useful, there is a more flexible command for sorting values. 7.4 gsort The command gsort also sortson on a list of variables, but you can determine the order by prefixing a variable name with + for ascending order or - for descending order. Try the following in the command window gsort +sex -class - maths Again you should list and scroll and note effect. "],["detecting-and-correcting.html", "8 Detecting and correcting 8.1 Exercise 8.2 Exercise 8.3 Replacing values 8.4 Exercise", " 8 Detecting and correcting In the data as you find it, there is an anomalous maths score. We can find this my simple inspection of the data because we have a small data set and few variables. We could for example use list with an if condition, like this list surname maths if maths &gt; 100 which would list any cases with a maths value greater than the allowable maximum. The comparison operator we use here is greater than. We must remember that the operator for equals is ==. If we had a larger data set with many variables this would be much more difficult. We will write some code to help us in the detection of variables. In Stata we can use programming functions that return values3. Many functions return values true or false. There is a function inrange(variable, min, max) that returns true if variable is greater than min and less than or equal to max. We negate functions with the operator meaning not: !. 8.1 Exercise In your script add the following lines: gen anomaly = 0 replace anomaly = 1 if !inrange(maths,0,100) The Stata command gen creates a new variable in our data set (for all cases) and gives it an initial value. The command repace replaces the values for cases of a variable - in this case with a condition. 8.2 Exercise After you run the lines above, use list with if to determine if there are any anomalous cases in your data set. Have you detected any? How many? The Stata symbol for or is | sometimes called bar or pipe. In Stata you can create a complex condition (like if) with the pipe, but note that each side of the pipe must be a complete Stata statement. So, if we consider a comparison with English, you must say: Would you like coffee or would you like tea? and not Would you like coffee or tea? List all cases where maths &lt; 50 or maths &gt; 60. Alter the second line in the previous exercise example above (the replace clause) so that it checks not only maths but the english, and history variables as well. 8.3 Replacing values In the data for this tutorial, there is one score in maths that is clearly out of range. In this case we need to replace the maths score for the student with surname DENCIK. We can do that on the Stata command line with a replace command. For the sake of this exercise, snapshot the current state of your data with preserve and then type this command on the console: replace maths = 57 if surname == &quot;DENCIK&quot; When you have inspected the data to ensure the correction has been made, restore the snapshot from before correction (This is to ensure that you can complete the next exercise. In a normal situtation you might preserve only at the end of your analysis or simply not save the results of changes you make to your data). 8.4 Exercise Correct the anomalous maths score, but do not base the replacement on the surname variable, rather use only the maths values. See Stata 17 Manual: Functions "],["generating-new-values-and-recoding-existing-values.html", "9 Generating new values and recoding existing values 9.1 New values 9.2 Exercise 9.3 Recoding values 9.4 Exercise", " 9 Generating new values and recoding existing values 9.1 New values There are two commands that generate new values in Stata: generate (which we have already seen, abbreviated to gen)and egen (extended generate). The first is a very fast, basic Stata command and should be used whenever simple arithmetic or other manipulation of your data will create the new values, for example generate avxm = (maths + english + history)/3 The second is a more complicated command that can apply any of a list of pre-defined functions to your data. The same result as above for example can be created by egen avxm = rowmean(maths english history) The full list of functions for egen is listed in Stata help. Both commands can be used in conjunction with replace to achieve complex operations of generation and modification of variables, for example we may generate a new value and then conditionally make it missing for some cases (dont run this code!): generate avxm = (maths + english + history)/3 replace avxm = .a if avxm &lt; 40 9.2 Exercise Use either of generate or egen to create a new variable avxm that is the mean of the three scores, maths, english, and history. Round the result to show no decimal places.(Read the Stata help on the round() function). 9.3 Recoding values It is not unusual to need to change the coding of a measure. For instance, we may have a continuous variable like avxm, that we wish to recode into groups (giving a ranked variable that we will call stream). We can do this in a number of ways in Stata. I will use the most obvious, if verbose, method first. Suppose that having calculated avxm as average examination score for each student, we now want to group the students according to their avxm. We will use the Stata if statement to do this. When you undertake a more complicated data management task, it is very helpful to write out in pseudo-English what you want to do. So, I want to apply this rule to my data:     If avxm &gt;= 60, stream = high,         if avxm &lt; 60 &amp; avxm &gt; 50, stream = mid,             if avxm &lt; 50, stream = low I have purposefully written this out in the most explicit way. Now Im going to reduce the complexity a little:     If avxm &gt;= 60, stream = high,         if avxm &lt; 50, stream = low,             else stream = mid In this version I dont have to spell out the compound condition. Win! Now, to write this in Stata, I will move the default else condition to the top and use gen and replace with if to get my new variable: gen stream = 2 //the else or default condition replace stream = 3 if avxm &gt;= 60 //cut off the top replace stream = 1 if avxm &lt; 50 //cut off the bottom I often prefer a numeric code to a string variable. Notice that I have used 3 for high against my own prejudice that it should be 1. In this way Stata and I will agree about ordering the data. I will explicitly label the data later to make it easier to read. 9.4 Exercise Examine the first ten cases in the data. Do they appear to be assigned to the correct stream according to the rule above? Read these instructions on using cut and then use cut to create a new variable with the same distribution as ranking - give the variable any new name you like. "],["selecting.html", "10 Selecting 10.1 Selecting variables 10.2 Exercise 10.3 Selecting cases 10.4 Using a filter variable 10.5 The uses of _all 10.6 Exercise 10.7 Creating a custom variable list", " 10 Selecting Selection of either variables or cases in Stata is often presented as applied to a single command or procedure. So, we use a list of variables after a command name and we may or may not then apply some criterion to filter the cases displayed. This works. It is however needlessly repetitive and sometimes we should consider temporarily reducing the data set in memory and operating over all data; creating a filter variable to reduce complex selection expressions. In what follows I mainly treat selecting data in the traditional way, but I will suggest that judicious use of restoreand preserve as well as the practice of storing selection criteria in filter variables can improve your Stata experience.4 10.1 Selecting variables We will use the command list which displays rows of variable values to illustrate the selection of variables. With most commands, variables can be included in the varlist that follows a command name. So on the command line we can type list maths english history which displays all the values for those three variables. Much of the time this is the only selection of variables you need. But, there are times when you wish to select a subset of variables for manipulation perhaps for a series of operations. In this case we can use preserve and restore. The command preserve takes a snapshot of a data set. If we then manipulate or modify the data, we can return to the snapshot state with the command restore. You can now use drop varlist to remove variables from the workplace or keep varlist to specify variables to be kept in the work space. 10.2 Exercise Use the preserve command to take a snapshot of your data and then drop the variables surname and sex. List the first ten observations in your data. Use restore to return to your original data. List the first ten observations in your data. Describe to your rubber duck5 the effect of preserve and restore. 10.3 Selecting cases If you need to select cases, that is rows from your data, you should use the if operator in your command. We will use list again to illustrate. Type the following on the console list surname english maths if english &gt; 60 &amp; maths &lt; 50 We can add wildcards to our selection criteria using regular expressions. To do this we use Statas regexm() function. The following example illustrates the use of regexm()in a compound condition on list 6 . 10.4 Using a filter variable A filter variable is a variable created to indicate membership of a sub-group of your data. Using the generate command with if conditions you can reduce a complex selection operation to a simpler expression. For example, suppose that you wish to select cases where class is three; maths is less than 55; history is greater 55. If we first try with a list command, we will write list if class == 3 &amp; maths &lt; 55 &amp; history &gt; 55 You should find that this lists just three cases. If we want to continually operate over just these cases for some part of our analysis then rather than writing this complex expression each time, we can generate a variable to act as a filter generate filtervar = 1 if class === 3 &amp; maths &lt; 55 &amp; history &gt; 55 and now the selection condition for further operations is reduced to if filtervar == 1 This method requires some discipline to remove filter variables (with drop) when their work is done. 10.5 The uses of _all Stata has a built in macro (Stata speak for a script variable) named _all that contains all the variable names currently in memory. The _all macro is obviously useful. but, it can be more useful combined with drop and keep. The command drop varlist removes variables from the workspace, while keep varlist drops all but the named variables. So, if we want to produce summary statistics for all continuous variables in our data, we can use keep followed by the list of names and then calculate the summaries for _all. 10.6 Exercise Add the following lines to your script preserve keep maths english history summarize _all restore What is the effect of these lines? How many variables are in working memory after the keep command? How many variables are in working memory after the restore command? Add the following lines to your script preserve keep maths english history tabstat _all, statistics(mean sd var kurt skew) restore Answer these questions: What is the Skewness of the mathematics scores? Which scores show more variability, English or History? Which subject has the lowest mean score? 10.7 Creating a custom variable list Since many commands take a list of variables to operate on, it can be useful to create a specific list of variables that you can easily refer to repeatedly. We will do this with a Stata macro. Stata macros are programming variables or, if you prefer, containers for text. Stata has both local and global macros and for the most part you will use local macros in your scripts. Add the following lines to your script local conts maths english history summarize `conts&#39; Since in this case we dont drop any variables, we dont need to use preserve and restore to work on a subset of our data unless we otherwise transform any values. How do I select a subset of observations using a complicated criterion? Your rubber duck may be an actual rubber duck and it may require some imagination to talk to your duck about Stata, but it will work! Alternatively, you may have a learning partner or study buddy and you can exploit them to listen to your explanation. What are regular expressions and how can I use them in Stata? list surname english maths if !regexm(surname,^B) &amp; english &gt; 60 &amp; maths &lt; 60 "],["labelling.html", "11 Labelling 11.1 Variables 11.2 Exercise 11.3 Values 11.4 Exercise", " 11 Labelling 11.1 Variables Variable names are not always very human friendly. It is useful therefor to be able to attach a label to a variable, especially for use in output such as graphs. Add the following line of code to your script label variable sex &quot;Gender&quot; now use the table command to view a table of frequencies of the sex variable. What has been the effect of your line of code? 11.2 Exercise Create appropriate labels for the variables in your data set. 11.3 Values When we record some categorical variables, we will often use a code to represent the different possible values. for example, we might code eyecolour as Code Meaning 1 Brown 2 Blue 3 Grey 4 Green 5 Other The use of numeric codes is very convenient in many circumstances, but it is not very human friendly. We would also like to put more meaningful labels for the values on output such as tables and graphs. To do this we create a label set and apply it to the variable values. The label set is a list of codes and meanings create by a command like label define eyecolourlabels 1 &quot;Brown&quot; 2 &quot;Blue&quot; 3 &quot;Grey&quot; 4 &quot;Green&quot; 5 &quot;Other&quot; We then apply the labels to values of a variable eyecolour with a command like label values eyecolour eyecolourlabels 11.4 Exercise Create an appropriate label set for the variable sex in your data set and apply it to the values of sex. Use the list command to check the results. What do you see? "],["some-exploratory-analysis.html", "12 Some exploratory analysis 12.1 Simple visualisations 12.2 Exercise 12.3 Summary statistics 12.4 Exercise", " 12 Some exploratory analysis Before embarking on the systematic modelling and testing of data, you may wish to explore its broad outline. There are several useful Stata procedures for this task, including: simple visualisatons: box plots; histograms; bar charts; summary statistics; tables. 12.1 Simple visualisations For continuous numeric data you can create box plots and histograms. In your do file add the line hist maths You might like to create graphs for a list of variables. You can try to first create a macro containing the variable names, then create the histograms. As in the following lines local conts maths english history hist `conts&#39; Unfortunately, this does not work (since hist can only be followed by a single variable) and in any case soon as Stata creates a new graph, the currently open graph window is destroyed. We can avoid this by creating and exporting the histograms we create in a program 7. Add the following lines to your script foreach var in `conts&#39; { hist `var&#39; graph export `var&#39;.png } Once this loop terminates, you can look in your current directory to find the exported graphs. You can dig deeper into your data by grouping values by any factor (categorical) variables, for example graph box `conts&#39;, by(sex) 12.2 Exercise Create histograms for the english andhistory data. How similar or dissimilar do you think these data are? Create box plots of maths for each level ofsex. How do you think the male and female maths scores compare? Using your web searching powers, see if you can generate a box plot of maths scores that is subset by both sex and class. You should look out for mention of an option `over. Having created the box plot by sex above, open Statas graph editor and add the title to the plot Maths scores by gender. 12.3 Summary statistics Quick summary statistics for continuous numeric variables can be calculated with the summarize command. Try the command summarize maths You will see that this gives a brief summary of the variable. you can add detail to the summary with the detail option summarize maths english, detail Summary statistics for continuous numeric variables can also be created with the tabstat command. tabstat maths english and you can specify statistics with the statistic option: tabstat maths english, statistic(median var skew) A Stata command that calculates statistics will display some default output. You can check what is displayed in help. However, many routines actually compute more statistics than are displayed. These quantities are stored in the return list for the command and can be accessed after it runs. For descriptive statistics, the list is called r(). The brackets indicate that r() is an array and that we can select particular statistics from the list. Consider summarize maths The default output looks like Variable | Obs Mean Std. dev. Min Max -------------+--------------------------------------------------------- maths | 30 53.76667 6.295501 39 64 If we now use the command return list we see scalars: r(N) = 30 r(sum_w) = 30 r(mean) = 53.76666666666667 r(Var) = 39.63333333333333 r(sd) = 6.295501039101918 r(min) = 39 r(max) = 64 r(sum) = 1613 These further can be viewed individually using, for example, di r(Var) and in more advanced procedures you can use them in collections and in mathematical expressions. 12.4 Exercise Compute the summary statistics with detail for history. Use the return list from the command and then display the kurtosis of the variable. Loop tutorial from Data Carpentry "],["tables.html", "13 Tables 13.1 Tables with custom statistics 13.2 Customized tables", " 13 Tables As well as tables of statistics for continuous data calculated with tabstat, you can create tables of frequencies for categorical data. For example table sex You can add percentages and cumulative percentages by using tab (short for tabulate) instead of table tab sex These commands create one-way tables of frequencies. A two-way table can be created by adding a variable tab sex class tabulate sex class You will see that the difference in output here is cosmetic. The syntax of table is actually table (rowvariables) (columnvariables) where the parentheses are only required if you have more than one variable in row or column. 13.1 Tables with custom statistics It is possible to create tables that show expected as well as observed frequency values table sex class, expected and to add specific detail about a continuous variable by using the command() option8. For example: table (class) (sex),command(r(sd) r(skewness): summarize maths, detail) You will notice that the command option uses values from the return list for (in this example) the summarize command. 13.2 Customized tables The customization of tables in Stata depends on the very powerful collection command set. There is not time to cover this in detail here and I recommend that you read this Stata blog post by Chuck Huber for more detail. To follow this section you should run the file customtabledo.do which you can download from ****. 13.2.1 A tabulation with customized layout First, look at the output of this command: tabulate teacher gender, chi2 expected and now let us see how to collect the results of this command and build a simple custom layout. collect: tabulate teacher gender, chi2 expected This creates a collection of all the output from the tabulate command (not just what is shown by default) which it stores in a set of dimensions: collect dims From the output here we see a dimension result with five levels. We can look at the content of these levels with the levelsof option: collect levelsof result and we see that the reult dimension has levels for N c chi2 p r: the number of observations, the number of columns, Pearsons Chi Square, the probability for Chi Square and the number of rows. One of the complications using tables and collections is the need to be aware of the dimensions and levels in a collection and their meanings. For now let us use the layout option on collect to create a simple table of output: collect layout (result[N chi2 p])() Like the table command, layout specifies first rows, then columns of your output. We will check the labelling of these levels with collect label list result, all and modify them for our output: collect label levels result chi2 &quot;Test of Association&quot; N &quot;Count&quot; p &quot;Prob(Chi)&quot;, modify This section gives the outlines of a simple example a customized table. There is much more that you can learn from the documentation. See the Stata manual for the command option. "],["some-simple-graph-scripts.html", "14 Some simple graph scripts 14.1 Intro 14.2 What will you learn? 14.3 Exercise 14.4 Basic types of Stata graph 14.5 The basic graph command and some simple examples 14.6 Exercise 14.7 Creating a graph adding elements and changing defaults: box plot example 14.8 Exercise 14.9 Adornments 14.10 Exercise 14.11 Subset the data 14.12 Exercise 14.13 Exercise 14.14 Standardising your graphing options 14.15 Introducing colour 14.16 Adding elements and changing defaults: scatter plot examples 14.17 Exercise 14.18 Using a Stata graph scheme 14.19 Exporting the graph to Word from your script 14.20 Creating and exporting several graphs in a loop", " 14 Some simple graph scripts 14.1 Intro Stata graphing is easy if you use the interactive graph editor. Stata graphing is hard if you script. The documentation is exhaustive and highly structured. And a complete rabbit hole. The cheatsheet is a great help! You should script because graphs that are scripted are repeatable; modifiable; programmatically exportable to Word, HTML and so on. The problem is remembering both the huge variety of options available (1,700?) to what are at base a small number of basic graphing commands, and knowing which options can apply to which graph types. I havent mastered either of these issues. The cheat sheets really help. https://www.dropbox.com/s/689lovb5vf5meyt/statacheatsheets.pdf?dl=0 Instead, I want to show you some simpler and then some slightly more complicated graph scripts with explanations of the options and then explain how to export your output to reports. 14.2 What will you learn? We will cover some basic graph editing using the graph editor/menus, just to get an idea of what Stata graphs can look like and some of the options we can change. We will then cover creating and modifying graphs in scripts including adding adornment to graphs, such as titles, subtitles, notes and captions, modifiying appearance such as the shape and colour of markers and using by(), over() and separate to produce facted and subplots and to selectively modify graph objects. You will also be introduced to the very basics of Statas graph schemes. Finally you will learn the effective way to export graphs from scripts to Word documents and how to create several graphs and export them in a script loop. So, first, we will look at using the graph editor to understand the alternative to scripting. 14.3 Exercise Import the data from https://www.ucl.ac.uk/~ccaajim/medtrial.csv&quot; using the Stata procedure import delimited. Use the following code to add value labels to the variable gender: label define genderl 1 &quot;Male&quot; 2 &quot;Female&quot; label values gender genderl Use the commands desc and codebook to examine the data set. Use the Stata grahics menu to make the following plots: a pie chart of frequencies of gender a bar chart of frequencies of smoker a histogram of hbefore a histogram of hafter with subplots by gender For the last of these, with the graph window open, open the graph editor and change the colour of the bars (plotregion 1, plot 1) and the bar borders to reddish. Save the plot to a png file. 14.4 Basic types of Stata graph twoway plots scatterplots; line plots; fit plots; fit plots with confidence intervals; area plots; bar plots; range plots; distribution plots scatterplot matrices bar charts box plots dot plots pie charts 14.5 The basic graph command and some simple examples The most basic command for creating graphs and charts in Stata is graph. This command has a number of sub-commands and options. The major sub-commands describe different varieties of plot - such as twoway, box plot, and the sub-types of twoway such as scatter and line. (For some reason there is also a small collection of graphs that are independent of either graph or twoway including histogram.) 14.6 Exercise Create a new do file and add the following lines of code: sysuse auto, clear hist mpg A simple histogram of the mpg variable from data set auto. Open the graph editor and change the backgroud colour of the graph. 14.7 Creating a graph adding elements and changing defaults: box plot example Next an equally simple box plot: graph box mpg A box plot graph of the mpg variable from the auto data set with no options specified. 14.8 Exercise Using the data in the file medtrial.csv on **https://www.ucl.ac.uk/~ccaajim/, create a box plot of the variable hafter. Use the option nooutsides to block the graphing of extreme values. Use your internet search power to find the documentation of the option nooutsides. 14.9 Adornments This graph has no options specified. We begin by specifying a Title. When creating a graph from a script, it makes code easier to read if each option is on a separate line, and if we indent options. To break a command over more than one line in a Stata do file, we must use the line extender code: ///. sysuse auto graph box mpg, /// title(&quot;A Simple Box Plot&quot;) A box plot graph of the mpg variable from the auto dataset with title added. Now, we add a sub-title, caption and a note on the graph with instructions for position and ring: sysuse auto graph box mpg, /// title(&quot;A Simple Box Plot&quot;, position(12) ring(1)) /// subtitle(&quot;There is only one group in this graph.&quot;, ring(0)) /// note(&quot;In later graphs we will subset the data.&quot;) /// caption(&quot;This is the caption or our first graph.&quot;) A Box Plot with Title, Subtitle and Note The position option is a clock number and ring is 0 or 1, indicating inside or outside the plot region. 14.10 Exercise Using the medtrial data set, create a box plot of each of hbefore and hafter. Add to each the title Plasma concentrations of H, with the appropriate subtitle indicating whether the measure is pre or post treatment. 14.11 Subset the data No we subset the data using the categorical variable foreign. graph box mpg, /// title(&quot;A Box Plot&quot;, position(12) ring(1)) /// note(&quot;We have no subset the data.&quot;) /// caption(&quot;This is the caption for our first graph.&quot;, ring(1)) /// subtitle(&quot;There are two groups in this graph.&quot;, ring(0)) /// over(foreign) Which produces9 A Box Plot with data grouped based on a nominal variable. You will see that this graph could be improved by paying attention to the position of some elements. I leave this to you as an exercise. We can modify this to exclude the ticks and grid lines - since this is a box plot we are only modifying the y-axis grid lines since no grid is the default for the x-axis. sysuse auto graph box mpg, /// title(&quot;A Simple Box Plot&quot;, position(12) ring(1)) /// note(&quot;In later graphs we will subset the data.&quot;) /// caption(&quot;This is the caption for our first graph.&quot;, ring(1)) /// subtitle(&quot;There are two groups in this graph.&quot;, ring(0)) /// over(foreign) /// ylabel(,nogrid noticks) /// asyvars which produces A Box Plot with gridlines supressed. This also introduces the use of asyvars with over(). This option chooses the first listed variable in over() as the y variable grouping. 14.12 Exercise Produce one graph showing box plots for hbefore and hafter with appropriate title, for each level of gender and differentiating the groups using color. 14.13 Exercise Run the following lines of code from a new do file gen surname2 = surname if smoker==&quot;Y&quot; scatter hbefore hafter , mlabel(surname2) Change the code so that the points are labelled only where gender is male. 14.14 Standardising your graphing options We can use variables, graph_opts and graph_opts_1 as examples, to standardize output. https://dimewiki.worldbank.org/Stata_Coding_Practices:_Visualization // For -twoway- graphs global graph_opts /// title(, justification(left) color(black) span pos(11)) /// graphregion(color(white)) /// xscale(noline) xtit(,placement(left) justification(left)) /// yscale(noline) ylab(,angle(0) nogrid) /// legend(region(lc(none) fc(none))) // For -graph- graphs global graph_opts_1 /// title(, justification(left) color(black) span pos(11)) /// graphregion(color(white)) /// yscale(noline) ylab(,angle(0) nogrid) /// legend(region(lc(none) fc(none))) Then use as in the following example sysuse auto.dta , clear scatter price mpg, /// ${graph_opts} graph draw , ysize(7) graph export &quot;scatter.png&quot; , width(4000) 14.15 Introducing colour And now we will introduce color by factor variable levels. Note that the command that achieves this, asyvars, is technically instructing Stata to treat each level the first grouping variable as a separate y axis variable. sysuse auto, clear graph box mpg, /// title(&quot;A Simple Box Plot&quot;) /// subtitle(&quot;There are two groups in this graph.&quot;) /// over(foreign) /// asyvars A box plot with factor shown by color of box. Here is the code for a graph with custom colours set for several of the plot regions. graph box mpg, /// title(&quot;A Simple Box Plot&quot;) /// subtitle(&quot;There are two groups in this graph.&quot;) /// over(foreign) /// asyvars /// graphregion(fcolor(gs13)) /// plotregion(fcolor(cranberry)) /// plotregion(icolor(ltblue)) This produces A box plot with a number of custom color options. Here is the chart with some of the regions labelled with relevant code: A box plot with a number of custom color options. It is worth noting that the undocumented command bgcolor appears to override custom color specifications, thus graph box mpg, /// title(&quot;A Simple Box Plot&quot;) /// subtitle(&quot;There are two groups in this graph.&quot;) /// over(foreign) /// asyvars /// bgcolor(white) graphregion(fcolor(gs13)) /// plotregion(fcolor(cranberry)) /// plotregion(icolor(ltblue)) A box plot with a number of custom color options. 14.16 Adding elements and changing defaults: scatter plot examples First the most basic scatter plot of two continuous variables: sysuse auto scatter mpg weight This using Stata defaults produces: A simple scatter plot of two continuous variables. In the next version, we first of all separate the mpg values into groups based on the rep variable. The ? in mpg? below is a wildcard for the numeric suffix of the list of mpg variables created by separate. A scatter plot of two continuous variables with varying marker shapes and colour use. We also change the markers, but note we must add msymbol() specifications for each group. sysuse auto, clear separate mpg, by(rep) scatter mpg? weight, /// msymbol(O D T S X) /// title(&quot;Miles per gallon as a function of Weight&quot;) /// subtitle(&quot;Showing a plausibly strong, negative relationship&quot;) /// plotregion(fcolor(bluishgray)) A scatter plot of two continuous variables with varying marker shapes and colour use. 14.17 Exercise Using the medtrial data, seperate the data in hafter by smoker. Make a scatter plot of the new hafter? variables against hbefore. Apply different marker symbols to the two data groups. Add an appropriate title. 14.18 Using a Stata graph scheme A Stata graph scheme is a collection of pre-determined choices you can apply easily to any Stata graph. All aspects of the appearance can be controlled from the scheme. There are a number of built-in schemes available and there are also user contributed schemes. In the code below, I apply the scheme plottig from the scheme package blindschemes which I have previously installed in Stata with the command ssc install blindschemes, replace all Now the graph code: sysuse auto graph box mpg, /// title(&quot;A Simple Box Plot&quot;) /// subtitle(&quot;There are two groups in this graph.&quot;) /// over(foreign) /// asyvars /// scheme(plottig) And the result: A box plot with the scheme plottig applied. This scheme is heavily inspired by the default appearance of graphs produced by ggplot2. And here is a scatter plot with the plotplain scheme applied and the legend cleaned up a bit by applying variable labels: sysuse auto, clear separate mpg, by(rep) label variable mpg1 &quot;Fuel Consumption1&quot; label variable mpg2 &quot;Fuel Consumption2&quot; label variable mpg3 &quot;Fuel Consumption3&quot; label variable mpg4 &quot;Fuel Consumption4&quot; label variable mpg5 &quot;Fuel Consumption5&quot; scatter mpg? weight, /// msymbol(O S D T X) /// title(&quot;Miles per gallon as a function of Weight&quot;) /// subtitle(&quot;Showing a plausibly strong, negative relationship&quot;) /// plotregion(fcolor(bluishgray)) /// scheme(plottig) A scatter plot with group membership indicated by markerhape and scheme plotplain applied. Once you are familiar with using schemes and with the graph options you may consider using these guidelines to modify a scheme to suit your own preferences. 14.19 Exporting the graph to Word from your script The following code creates a box plot with a variety of options set, and saves the output as part of a Word document also created by the script. sysuse auto, replace cd &quot;c:\\Users\\DELL\\Documents\\Data\\Stata\\TablesTutorial\\StataGraphing\\&quot; putdocx clear putdocx begin // Create paragraphs putdocx paragraph putdocx text (&quot;Create and embed your graph&quot;), style(Heading1) putdocx paragraph putdocx text (&quot;This is a graph created by a script and exported to Word.&quot;) // Embed a graph graph box mpg, /// title(&quot;A Simple Box Plot&quot;) /// subtitle(&quot;There are two groups in this graph.&quot;) /// over(foreign) /// asyvars /// graphregion(fcolor(gs13)) /// plotregion(fcolor(cranberry)) /// plotregion(icolor(ltblue)) graph export &quot;C:\\Users\\DELL\\Documents\\Data\\Stata\\TablesTutorial\\StataGraphing\\mgpbox7.png&quot;, as(png) putdocx image &quot;C:\\Users\\DELL\\Documents\\Data\\Stata\\TablesTutorial\\StataGraphing\\mgpbox7.png&quot; putdocx save myreport.docx, replace As you continue to create visualistions you can change the otpion on putdocx save from replace to append. 14.20 Creating and exporting several graphs in a loop There are often situations when we wish to create identical graphs for a number of variables or the same variable over or by different factors. In this case we can use a loop structure and a local macro in Stata to do the job for us. Consider the code: import delimited &quot;https://www.ucl.ac.uk/~ccaajim/results.csv&quot;, clear local exams &quot;maths english history&quot; foreach exam in `exams&#39; { graph box `exam&#39; graph export &quot;`exam&#39;.png&quot;, replace } This code takes three variables from a data set and in a foreach loop creates then exports a boxplot of that variable. The code should be easily modifiable and in may circumstances will considerably reduce the number of lines of code written. Remember to distinguish by() and over(). "],["larger-exercises-part-i.html", "15 Larger Exercises Part I", " 15 Larger Exercises Part I You should now attempt Part I of the larger exercises. It is better to work with a partner (at least more than one and no more than three). After you have written a script in response to the questions, your facilitator will provide a sample solution. You should review your script and the sample together and formulate any questions or observations for a round table discussion. The sample script is not necessarily the best solution; a complete solution; the only solution. Do not shy away from suggesting improvements. "],["hypothesis-tests.html", "16 Hypothesis tests 16.1 For two categorical variables 16.2 Exercise 16.3 For one continuous and one categorical variable of two levels 16.4 Exercise 16.5 The paired samples ttest 16.6 Once continuous and one categorical variable of more than two levels 16.7 Two continuous variables 16.8 Correlation 16.9 Exercise 16.10 Exercise", " 16 Hypothesis tests 16.1 For two categorical variables A common procedure is to test for an association between two categorical variables. We can illustrate this procedure using a tabulation with a \\(\\chi{}^2\\) statistic. (Of course, the variable sex is not necessarily binary valued.) table sex class, expected chi2 16.2 Exercise Create the table with \\(\\chi{}^2\\) statistic and expected values as above. Should you reject the H0 that sex and class are not associated? 16.3 For one continuous and one categorical variable of two levels If we have one continuous numeric variable and one two level categorical variable (such as employed vs unemployed) that would divide our data into two groups, we can ask ourselves whether the mean of the continuous variable differs for the groups (with H0 being that they do not). If our two groups are independent, then we must first ask if the variance in the data is more or less equal between groups. The null hypothesis is that the variances are equal. This is tested by the comparison of variances using Statas robvar command. We can test the maths scores by sex in our data robvar maths, by(sex) Knowing whether or not we are dealing with groups displaying (more or less) equal variance in the variable of interest, we can go on to conduct an independent samples t-test. The code is ttest maths, by(sex) (Assuming that we have interpreted the results of robvar to mean the variance in maths for the two groups is equal). 16.4 Exercise Run the robvar procedure above but for the history and sex variables. What are the three W statistics produced? Which of them tests that the variances are equal for a comparison of means? Is there strong enough evidence in this case to reject the null hypothesis? Use the ttest command to test the null hypothesis that \\[\\mu{}\\ english _{\\ female \\ students} = \\mu \\ english _{\\ male\\ students}\\] What conclusion do you draw? 16.5 The paired samples ttest We can also compare the same group of subjects on two measures to see if the means differ. In this case there is no need to check the variances before conducting the test. For example we could test whether or not mean scores in English and History differ (with the null hypothesis that they do not) ttest english == history Using this procedure, how do English scores compare to History scores and how do English scores compare to Mathematics scores? 16.6 Once continuous and one categorical variable of more than two levels We can compare the level avxm by teacher, this is to say test the null hypothesis \\[\\mu{}\\ avxm \\ _{teacher \\ one} = \\mu{}\\ avxm \\ _{teacher \\ two} = \\mu{}\\ avxm \\ _{teacher \\ three} \\] 16.6.1 One way ANOVA and post-hoc testing The Stata command to test the null hypothesis above is oneway maths teacher, bonferroni tabulate This command produces summary statistics the ANOVA statistic F, its associated probability, and other quantities calculated as part of the ANOVA. In the version given above, we have included a tabulation of pairwise comparisons using the bonferroni correction. We can separately examine the pairwise comparisons if we wish with pwmean avxm, over(teacher) mcompare(bonferroni) effects This method does not display the ANOVA table itself and the mcompare() option gives us access to a slightly different range of correction options. 16.7 Two continuous variables 16.8 Correlation Analysis of two continuous variables begins with calculating the Pearson Correlation Coefficient R. This statistic ranges from -1 indicating an inverse or negative correlation 0 indicating no correlation +1 indicating a positive correlation We should take note that a correlation has not only magnitude and direction, but that there is an associated hypothesis test: the the true correlation is 0. This test gives a p value associated with R. The code to compute R in Stata is correlate var1 var2 This computes R for var1 and var2. If you do not specify a variable list, Stata computes correlations between all non-string variables in your data set. 16.9 Exercise Compute Pearson correlations with significance values for the pairs english-maths english-history Explain to your learning partner what the results mean to you. 16.9.1 Simple visualisation of correlation The simplest way to visualise a correlation is with a scatter plot. You may wish to consider, based on your plans for further analysis which variable you wish to assign to which axis. To create a scatter plot you can start with scatter english history To add the trend line: scatter english history || lfit english history And add a confidence interval: scatter english history || lfitci english history Now you can add labels, titles and so on twoway lfitci english history || scatter english history, jitter(5) /// title(&quot;English as a predictor of History scores&quot;) /// legend(off) /// mcolor(red) /// msymbol(Oh) /// subtitle(&quot;For all students&quot;) /// xtitle(&quot;English exam scores&quot;) /// ytitle(&quot;History exam scores&quot;) /// scheme(sj) Stata has a very large range of graphing commands and options. While they are reasonably complicated, a good way to explore them is through this gallery. 16.10 Exercise Using any resources you can find, try to find more Stata graph schemes and try at least three on the code above. "],["regression.html", "17 Regression 17.1 Simple Linear Regression 17.2 Exercise 17.3 Multiple linear regression 17.4 Exercise 17.5 Regression with categorical variables 17.6 Exercise", " 17 Regression 17.1 Simple Linear Regression The most basic regression command in Stata is regress. The syntax is regress y-variable x-variable(s)[, options] The results include an ANOVA table and a table of coefficients. The ANOVA table has measures associated with the \\(H0\\) that this model is no better than a model with no predictor variables. You should read Regression analysis, annotated output for help understanding the results. The important components of the coefficient table are _cons: the intercept beta coefficient (\\(m\\)) and its associated \\(t\\) score with \\(p\\) value and confidence interval. 17.2 Exercise Run a simple linear regression with history as the dependent variable (the y variable) and english as the single, independent variable (the x variable). Is this model better than a model with no predictor variables? Fill out the coefficients in the equation for the line \\(y=mx+\\beta{}\\); Overall, what portion of the variance in history can be attributed to variance in english; Is it plausible that the true value of \\(m\\) (the slope of the line of best fit) is 0? 17.3 Multiple linear regression The command is regress y-variable x-variable1 x-variable2...x-variablen [,options] 17.4 Exercise Using California Department of Educations API 2000 dataset from https://stats.idre.ucla.edu/stat/stata/webbooks/reg/elemapi investigate the academic performance of schools (api00) with respect to average k3 class size, the percentage of students receiving free meals and the percentage of teachers holding full teaching credentials. Would you say that any or all of these factors affect a schools performance? 17.5 Regression with categorical variables It is possible to include categorical variables in a regression model. For instance regress avxm i.class The prefix i. signals to Stata this this variable should be treated as a factor. Stata will effectively recode this as two dummy, binary variables class_2 and class_3. So the possibilities are Dummy encoding of the class variable Class_2 Class_3 Original class 1 0 2 0 1 3 0 0 1 If we recall equation for the linear model \\(y = mx_{1} + mx_{2}...+...mx_n\\), then we can see it applies unchanged for this new regression, except that for each coefficient, \\(x\\) ranges over only 0 or 1. Here is the result from Stata: Output from a regression with dummy binary variables. Here, the intercept (_cons) is the average of the dependent variable - of avxm - when class is equal to the base category, which in this case is class one. For class two, the value of y is \\[(3.59*1)+(6.64*0)+52.46\\] and for class three \\[(3.59*0)+(6.64*1)+52.46\\] To further underline the nature of a regression with categorical independent variables, you can compare the results of this regression with the output form Statas oneway and pwmean commands. You will see that the differences in means and the statistics and associated \\(p\\) value are identical to those in your regression output. 17.6 Exercise Run a one way ANOVA test comparing avxm by level of class. Add the post hoc pairwise tests with Bonferroni correction. Run a pwmean procedure for avxm over class. How would you say the results from these compare with the regression above? Import the data from this file: https://www.ucl.ac.uk/~ccaajim/medtrial.csv Convert the variable gender to a numeric variable so that you can use it as a factor in a regression. Run a regression analysis with hafter as the dependent variable and age and gender as the independent variables. Test also for any interaction. How do you interpret the results? "],["larger-exercises-part-ii.html", "18 Larger Exercises Part II", " 18 Larger Exercises Part II You should now attempt Part II of the larger exercises. It is better to work with a partner (at least more than one and no more than three). After you have written a script in response to the questions, your facilitator will provide a sample solution. You should review your script and the sample together and formulate any questions or observations for a round table discussion. The sample script is not necessarily the best solution; a complete solution; the only solution. Do not shy away from suggesting improvements. "],["notes.html", "19 Notes", " 19 Notes "]]
